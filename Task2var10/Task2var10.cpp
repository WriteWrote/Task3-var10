// Task2var10.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include <vector>
#include "MyComparator.h"

using namespace std;


/*
Реализовать шаблон класса (функции), принимающий элементы любого типа 
и поддерживающий базовые операции в соответствии со своим назначением. 
В качестве внутренней структуры хранения данных можно использовать, например, динамический массив. 
Использование шаблона должно осуществляться из функции main() и содержать 
примеры работы как минимум с двумя разными типами данных (например, int и string).

10.	Шаблон функции быстрой сортировки qsort(), принимающий критерий сравнения в виде аргумента шаблона.
*/

template<typename T>
vector<T> quickSort(vector<T> list, MyComparator<T> &compar) {
    //todo: использовать динамические массивы
    // подредактировать сортировку
    

    ////Указатели в начало и в конец массива
    //int i = 0;
    //int j = size - 1;

    ////Центральный элемент массива
    //int mid = mas[size / 2];

    ////Делим массив
    //do {
    //    //Пробегаем элементы, ищем те, которые нужно перекинуть в другую часть
    //    //В левой части массива пропускаем(оставляем на месте) элементы, которые меньше центрального
    //    while (mas[i] < mid) {
    //        i++;
    //    }
    //    //В правой части пропускаем элементы, которые больше центрального
    //    while (mas[j] > mid) {
    //        j--;
    //    }

    //    //Меняем элементы местами
    //    if (i <= j) {
    //        int tmp = mas[i];
    //        mas[i] = mas[j];
    //        mas[j] = tmp;

    //        i++;
    //        j--;
    //    }
    //} while (i <= j);


    ////Рекурсивные вызовы, если осталось, что сортировать
    //if (j > 0) {
    //    //"Левый кусок"
    //    qsortRecursive(mas, j + 1);
    //}
    //if (i < size) {
    //    //"Првый кусок"
    //    qsortRecursive(&mas[i], size - i);
    //}
    
    
    
    // как терять объекты типа T, если они сложнее примитивов?

    return list;
}

int main()
{
    vector<string> intVec;
    MyComparator<string> strComp;
    vector<string> resStr = quickSort(intVec, strComp);
    intVec.clear();

    return 0;
}
